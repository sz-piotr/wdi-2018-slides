=== 0 ===

Cześć, nazywam się Piotr Szlachciak i dzisiaj przedstawię prezentację zatytułowaną "W kółko to samo, czyli o iteracji słów kilka".

=== 1 ===

Chyba każdy z nas kiedyś napisał kod podobny do tego.

Dzisiaj chciałbym was przekonać, że jest to przykład źle napisanego kodu.

Ale żeby zrozumieć dlaczego nie warto tak pisać, należy najpierw spojrzeć na to skąd wzięła się taka konstrukcja jak pętla for.

=== 2 ===

Początków takiej postaci pętli for należy doszukiwać się w języku C, którego składnia leży u podstawy JavaScriptu.

Założeniem języka C było udostępnienie dostępu programiście do niskopoziomowego programowania z zachowaniem wysokopoziomowej składni. Efektem tego jest prosta możliwość przełożenia instrukcji języka C na asembler.

Jednak JavaScript operuje na znacznie wyższym poziomie abstrakcji niż C. Sama natura języka nie pozwala nam dokonywać optymalizacji na poziomie pojedynczych instrukcji procesora. Zanim program napisany w JavaScript zostanie wykonany musi zostać sparsowany, a w trakcie jego wykonania cyklicznie następuje wywołanie Garbage Collectora, który zwalnia programistę z zarządzania pamięcią.

Te cechy języka kosztem mniejszej wydajności zapewniają nam możliwość wyrażenia swoich intencji w prostszy i bardziej czytelny sposób.

=== 3 ===

Wróćmy więc do naszego początkowego przykładu.

Podstawowym problemem tego kodu jest to że powinien robić jedną rzecz, a robi dwie.

=== 4 ===

Poza wywołaniem funkcji dla każdego elementu tablicy równocześnie zajmuje się kontrolą pętli. Aby ten problem naprawić możemy zrobić refactoring i wydzielić kontrolowanie pętli do osobnej funkcji.

=== 5 ===

A następnie użyć jej do osiągnięcia naszego pierwotnego celu:

=== 6 ===

W większości zastosowań nie ma jednak sensu duplikować istniejącej funkcjonalności. Możemy użyć wbudowanej metody forEach obiektów typu Array.

=== 7 ===

Zauważmy, że w tym rozwiązaniu przekazaliśmy funkcję jako argument. Jest to możliwe ponieważ JavaScript traktuje funkcje tak jak inne obiekty. Dzięki temu otwiera nam drogę do programowania w paradygmacie innym niż imperatywny. JavaScript pozwala nam pisać funkcyjny kod.

Dzięki podejściu funkcyjnemu możemy tworzyć pętle bez użycia słowa kluczowego for. Żeby zrozumieć jak to się dzieje musimy zrozumieć zjawisko rekurencji.

=== 8 ===

Ten klasyczny przykład pokazuje obliczanie kolejnych elementów ciągu Fibonacciego poprzez wywoływanie przez funkcję samej siebie z innymi argumentami. Nie skupiając się na problemach tej implementacji, przejdźmy do wykorzystania rekurencji do iteracji.

=== 9 ===

Wykorzystując destrukturyzację z ES2015 możemy to zapisać znacznie prościej.

=== 10 ===

Zauważmy że wszystkie przedstawione implementacje forEach nie zakładają niczego o danych zawartych w tablicy ani o operacji którą chcemy na nich wykonać. Abstrakcja iteracji pozwala nam na czytelny zapis naszych intencji.

Czasem celem iteracji nie jest użycie elementów tablicy do wykonania jakiegoś zadania, a ich transformacja.

=== 11 ===

Ten kod ma ten sam problem co nasz początkowy przykład. Ma za dużo obowiązków. Na ratunek przychodzi funkcja map.

=== 12 ===

Wydawałoby się więc, że użycie prostych, wbudowanych konstrukcji języka takich jak forEach czy map rozwiązuje problem całkowicie. Czasem jednak napotykamy problemy nieco bardziej złożone niż te dostępne w metodach obiektów Array.

Powstały więc biblioteki, które zapewniają znacznie większy arsenał małych funkcji do manipulacji danymi. Dwie główne, prezentujące odmienne podejście do problemu biblioteki to:

=== 13 ===

Lodash oraz Ramda.

=== 14 ===

Korzystając z Lodasha zapisujemy nasze działania sekwencyjnie, w podobny sposób do tego jak korzystaliśmy z funkcji wbudowanych.

=== 15 ===

Korzystając z Ramdy nasze działania to funkcje składające się z mniejszych funkcji.

Oczywiście nic nie stoi na przeszkodzie aby korzystać z Lodasha w sposób funkcyjny a z Ramdy w sposób imperatywny.

Ale!

Co jeśli nie chcemy iterować po strukturach danych. Jeśli chcemy po prostu powtórzyć jakieś działania kilka razy? A może chcemy iterować po ogromnych, bądź nieskończonych zbiorach?

W tym momencie zawodzą nas wcześniejsze podejścia.

Na szczęście JavaScript otrzymał w ES2015 specyfikację i implementację protokołu iteracji, który otwiera nowe możliwości.

=== 16 ===

Byłem kiedyś na prezentacji pokazującej najciekawsze rzeczy dodane w ES2015. Usłyszałem wtedy takie stwierdzenie:

=== 17 ===

"Oprócz wszystkiego, twórcy JavaScript dodali również generatory. Raczej niepotrzebnie, bo nie widzę dla nich żadnego zastosowania"

Nic bardziej mylnego. Zobaczmy co to takiego są te generatory, jak ich używać, jak je pisać i wreszcie co dobrego z nich wynika.

=== 18 ===

Rozpatrzmy jeszcze raz kod z początku prezentacji.

Pokażę wam jeszcze jeden sposób zapisania tego samego:

=== 19 ===

Może nie widać tego od razu ale ten kod unika pewnego problemu, którego tak bardzo chcieliśmy uniknąć wcześniej. Otóż nie zajmuje się on w ogóle konstrukcją pętli. Nie interesują go indeksy i inkrementacja. Jest tylko deklaracja "zrób coś dla każdego elementu tablicy".

Ostatecznie osiągamy taki sam podział odpowiedzialności jak w przypadku innych rozwiązań: nasz kod mówi jedynie co chcemy zrobić, o to jak to osiągnąć dbają inne elementy (w tym przypadku konstrukcja for..of).

Warto wiedzieć, że for..of nie korzysta w ogóle z indeksów tablicy! Obiekty Array implementują protokół iteracji (iterable protocol). Oznacza to, że posiadają metodę @@iterator (Symbol.iterator), która zwraca iterator - obiekt pozwalający uzyskać dostęp do kolejnych elementów sekwencji.

Zobaczmy jak wykorzystać ten mechanizm "ręcznie", bez użycia for..of

=== 20 ===

Jak widzimy, nasz iterator zwraca obiekty posiadające wartość oraz flagę która mówi o tym, czy sekwencja się zakończyła. Zobaczmy w jaki sposób możemy stworzyć własny iterator.

=== 21 ===

Używając generatorów.

Generatory działają podobnie do zwykłych funkcji ale ich wykonanie może zostać przerwane. Aby tego dokonać używane jest słowo kluczowe yield.

Jak zapewne zauważyliście wynik działania naszego kodu jest identyczny jak w przypadku użycia tablicy.

Spróbujmy to wykorzystać na naszą korzyść i napiszmy bardziej zaawansowany generator.

=== 22 ===

Nasz nowy generator tworzy iterator dla sekwencji liczb całkowitych ograniczonej argumentem.

=== 23 ===

W tym momencie możecie się zastanawiać po co tyle zachodu aby osiągnąć to samo co mogliśmy osiągnąć używając tablicy. Ale to wcale nie jest to samo. Nasza funkcja może pobierać dowolnie duży limit, a iterator będzie zajmował dokładnie tyle samo pamięci.

=== 24 ===

Tym samym otrzymujemy możliwość konstruowania nieskończonych zbiorów danych.

Na tym jednak nie kończą się niespodzianki. Używając generatorów możemy transformować dowolne sekwencje w inne.

Najprostszym przykładem będzie funkcja map napisana z użyciem generatorów.

=== 25 ===

Widzimy, że ta pięciolinijkowa funkcja daje nam ogromne możliwości. Spójrzmy, jak je wykorzystać w praktyce.

Załóżmy, że chcemy uzyskać sekwencję wszystkich potęg liczby 2. Oczywiście można to uzyskać w taki sposób:

=== 26 ===

Ale to rozwiązanie zakłada, że wiemy z góry ile elementów będzie nam potrzebne. Musimy też zaalokować na nie pamięć. Spójrzmy więc na implementację z użyciem napisanych przez nas prostych funkcji:

=== 27 ===

W tym momencie widzimy już, że zbudowaliśmy narzędzie, którego nie zapewniają nam biblioteki takie jak Lodash czy Ramda.

Oczywiście, ponieważ jest to narzędzie, nie jest ono ani lepsze ani gorsze od innych, ponieważ ma inne zastosowania, podobnie jak młotek nie jest lepszy ani gorszy od śrubokrętu.

Protokół iteracji pozwala nam korzystać z sekwencji danych, niezależnie od tego w jaki sposób zostały one utworzone. Bez problemu możemy dzięki niemu iterować po obiektach takich jak pojedynczo łączone listy albo zbiory, ale nie możemy tworzyć nowych instancji tych struktur danych.

Funkcja map działająca na iteratorach zwraca iterator, a nie tablicę czy listę. Podobnie zresztą jak funkcja range.

Wróćmy do niej na chwilę.

=== 28 ===

Warto zauważyć, że wywołanie funkcji range nie powoduje żadnych obliczeń. Dopiero jej użycie wymusza obliczenie kolejnych elementów generowanej sekwencji.

Ta funkcja ma jednak pewien problem, i tutaj pytanie do publiczności, czy ktoś może już go widzi? Podpowiem, że problem jest w wartości zwracanej przez funkcję.

=== 29 ===

Tak! Możemy tej wartości użyć tylko raz.

Dzieje się tak ponieważ iteratory są obiektami jednorazowego użytku. Pozwalają tylko na jednorazowe przejście po sekwencji elementów. Wiemy jednak, że po tablicy możemy iterować wielokrotnie. Nie jest ona iteratorem a obiektem, który implementuje protokół iteracji (ang. iterable).

Aby temu zapobiec możemy zamiast iteratora zwracać obiekt, który implementuje protokół iteracji.

=== 30 ===

Umieszczając generator pod kluczem Symbol.iterator w naszym obiekcie uzyskujemy możliwość wielokrotnej iteracji po nim.

Możemy to też uprościć w zapisie:

=== 31 ===

Możemy sobie pogratulować. Osiągnęliśmy sukces.

Pozostało tylko usiąść do własnych projektów i zaimplementować takie proste i użyteczne funkcje na generatorach.

=== 32 ===

Albo dołączyć zestaw takich funkcji z istniejącej biblioteki. W wolnym czasie napisałem właśnie taką prostą bibliotekę, która usprawnia pracę z iteratorami i generatorami.

Oprócz omówionych podczas tej prezentacji funkcji takich jak range, forEach, map zawiera ona znany z pythona zip jak również uznawane za podstawę programowania funkcyjnego w JavaScript filter, reduce i wiele innych.

=== 33 ===

Spójrzmy na przykład korzystania z tej biblioteki, odpowiadający tym, które dzisiaj omówiliśmy.

W tym przykładzie sekwencja którą tworzymy jest nieskończona, a konsument decyduje użyć tylko pięciu pierwszych elementów.

=== 34 ===

Na koniec nieco bardziej zaawansowany przykład Wykorzystujący dwie funkcje zawarte w bibliotece: zip oraz repeat, oraz funkcję range o rozszerzonej funkcjonalności.

W tym przykładzie range tworzy malejącą sekwencję liczb parzystych, repeat sekwencję abababab, a zip łączy je w jedną sekwencję par wartości.

=== 35 ===

Bardzo dziękuję za uwagę i zapraszam do korzystania z mojej biblioteki.
